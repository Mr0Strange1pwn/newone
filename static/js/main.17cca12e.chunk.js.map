{"version":3,"sources":["redux/donut/donutType.js","component/cake.js","redux/cake/cakeAction.js","redux/cake/cakeType.js","redux/cake/cakeReduser.js","redux/iceCreams/icecreamReduser.js","redux/iceCreams/icecreamType.js","redux/donut/donutReduser.js","redux/rootReduser.js","redux/store.js","component/hooksCake.js","component/iceream.js","redux/iceCreams/icecreamAction.js","component/hookIcecream.js","component/donut.js","redux/donut/donutAction.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","numOfCakes","cake","numberOfCake","dispatch","buyCake","type","props","style","background","color","onClick","initialState","cakeReduser","action","console","log","initialIcecream","numberOfIcecream","icecreamReduser","initialDonuts","numOfDonuts","donutreduser","rootReduser","combineReducers","icecream","donut","store","createStore","HooksCake","numOfCake","useSelector","useDispatch","numOfIcecream","info","HookIcecream","numberOfIcecreams","Donut","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17cca12e.chunk.js","sourcesContent":["export const BUY_DONUT = \"BUY_DONUT\";\r\n","import React from \"react\";\r\nimport { buyCake } from \"../redux/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Cake = props => {\r\n  return (\r\n    <div style={{ background: \"blue\", color: \"gray\" }}>\r\n      <h1>CAKE SHOP</h1>\r\n      <p>avalable Cake -{props.numOfCakes}</p>\r\n      <button onClick={props.buyCake}>BUY CAKE</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    numOfCakes: state.cake.numberOfCake\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    buyCake: () => dispatch(buyCake())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Cake);\r\n","import { BUY_CAKE } from \"./cakeType\";\r\n\r\nexport const buyCake = () => {\r\n  return {\r\n    type: BUY_CAKE\r\n  };\r\n};\r\n","export const BUY_CAKE = \"BUY_CAKE\";\r\n","import { BUY_CAKE } from \"./cakeType\";\r\n\r\nconst initialState = {\r\n  numberOfCake: 10\r\n};\r\n\r\nconst cakeReduser = (state = initialState, action) => {\r\n  console.log(\"action type ******\", action.type);\r\n  switch (action.type) {\r\n    case BUY_CAKE:\r\n      return {\r\n        ...state,\r\n        numberOfCake: state.numberOfCake - 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default cakeReduser;\r\n","import { BUY_ICECREAM } from \"./icecreamType\";\r\n\r\nconst initialIcecream = {\r\n  numberOfIcecream: 25\r\n};\r\n\r\nfunction icecreamReduser(state = initialIcecream, action) {\r\n  switch (action.type) {\r\n    case BUY_ICECREAM:\r\n      return {\r\n        ...state,\r\n        numberOfIcecream: state.numberOfIcecream - 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\nexport default icecreamReduser;\r\n","export const BUY_ICECREAM = \"BUY_ICECREAM\";\r\n","import { BUY_DONUT } from \"./donutType\";\r\n\r\nconst initialDonuts = {\r\n  numOfDonuts: 15\r\n};\r\n\r\nfunction donutreduser(state = initialDonuts, action) {\r\n  switch (action.type) {\r\n    case BUY_DONUT:\r\n      return {\r\n        ...state,\r\n        numOfDonuts: state.numOfDonuts - 1\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default donutreduser;\r\n","import { combineReducers } from \"redux\";\r\nimport cakeReduser from \"./cake/cakeReduser\";\r\nimport icecreamReduser from \"./iceCreams/icecreamReduser\";\r\nimport donutreduser from \"./donut/donutReduser\";\r\n\r\nexport const rootReduser = combineReducers({\r\n  cake: cakeReduser,\r\n  icecream: icecreamReduser,\r\n  donut: donutreduser\r\n});\r\n","import { createStore } from \"redux\";\r\nimport { rootReduser } from \"./rootReduser\";\r\n\r\nconst store = createStore(rootReduser);\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { buyCake } from \"../redux\";\r\n\r\nfunction HooksCake() {\r\n  const numOfCake = useSelector(state => state.cake.numberOfCake);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div style={{ background: \"blue\", color: \"gray\" }}>\r\n      <h2>by hook ....</h2>\r\n      <h2>cakes in Store {numOfCake}</h2>\r\n      <button onClick={() => dispatch(buyCake())}>Buy a Cake</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HooksCake;\r\n","import React from \"react\";\r\nimport { buyIcecream } from \"../redux/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nconst Icecream = props => {\r\n  return (\r\n    <div style={{ background: \"gray\", color: \"blue\" }}>\r\n      <h1>ICECREAM SHOP</h1>\r\n      <p>avalable Icecreams -{props.numOfIcecream}</p>\r\n      <button onClick={props.buyCake}>BUY ICECREAM</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    numOfIcecream: state.icecream.numberOfIcecream\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    buyCake: () => dispatch(buyIcecream())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Icecream);\r\n","import { BUY_ICECREAM } from \"./icecreamType\";\r\n\r\nexport function buyIcecream() {\r\n  return {\r\n    type: BUY_ICECREAM,\r\n    info: \"for icecream store\"\r\n  };\r\n}\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { buyIcecream } from \"../redux\";\r\n\r\nfunction HookIcecream() {\r\n  const numberOfIcecreams = useSelector(\r\n    state => state.icecream.numberOfIcecream\r\n  );\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div style={{ background: \"gray\", color: \"blue\" }}>\r\n      <h2> icecream store with hooks</h2>\r\n      <p>avalable icecreams - {numberOfIcecreams} </p>\r\n      <button onClick={() => dispatch(buyIcecream())}>buy a icecream</button>\r\n    </div>\r\n  );\r\n}\r\nexport default HookIcecream;\r\n","import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { buyDonut } from \"../redux\";\r\nfunction Donut() {\r\n  const numOfDonuts = useSelector(state => state.donut.numOfDonuts);\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div style={{ background: \"brown\" }}>\r\n      <h1>donut store</h1>\r\n      <h3>remain donuts - {numOfDonuts} </h3>\r\n      <button onClick={() => dispatch(buyDonut())}>BUY a DONUT</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Donut;\r\n","import { BUY_DONUT } from \"./donutType\";\r\n\r\nexport const buyDonut = () => {\r\n  return {\r\n    type: BUY_DONUT,\r\n    info: \" for donut store\"\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport Cake from \"./component/cake\";\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport HooksCake from \"./component/hooksCake\";\r\nimport Icecream from \"./component/iceream\";\r\nimport HooksIcecream from \"./component/hookIcecream\";\r\nimport Donut from \"./component/donut\";\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <Cake />\r\n        <hr />\r\n        <HooksCake />\r\n        <hr />\r\n        <Icecream />\r\n        <hr />\r\n        <HooksIcecream />\r\n        <hr />\r\n        <Donut />\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}